install.packages("swirl")
library("swirl")
swirl()
load('swirl')
clc
load("swirl")
library('swirl')
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.4)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- z - 1
my_sqrt <- ssqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl(0)
1:20
pi:10
15:1
?:
?":"
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq((5, 10, length((30)))
my_seq <- seq(5, 10, length(30))
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
sdfag
my_char <- "my"
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
paste(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Swirl")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!"
paste("Hello", "world!")
paste("Hello", "world!")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
head(iris)
dn = list(paste("Y", as.character(1949:1960), sep = ""), month.abb)
dn
airmat = matrix(AirPassengers, 12, byrow = TRUE, dimnames = dn)
airmat
air = as.data.frame(t(airmat))
air
mean(air$Y1951)
max(airmat$Jan)
air(1,)
air[1,]
max(t(air))
max(air, na.rm=T)
rowMaxs()
max(air)
max(air, row())
df <- apply(air,1,max)
df
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
library(mlbench)
p <- mlbench.xor(5)
p
as.data.frame(p)
# 6 overlapping classes
p <- mlbench.2dnormals(500,6)
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
plot(p)
dev.off
dev.off()
dev.off()
plot(p)
p <- mlbench.2dnormals(500,6)
plot(p)
p
bayesclass(p[1:5])
p <- mlbench.2dnormals(10,6)
p
p <- mlbench.2dnormals(12,6)
p
plot(p)
bayesclass(p)
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
p1 <- plot_ly(economics, x = ~date, y = ~uempmed)
p2 <- plot_ly(economics, x = ~date, y = ~unemploy)
subplot(p1, p2, p1, p2, nrows = 2, margin = 0.05)
par(mfrow=c(2,2))
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
par(mfrow=c(2,1))
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
p <- mlbench.2dnormals(10,2)
π
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
p <- mlbench.2dnormals(500,2)
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
sum(p$classes == 1)
bayesclass(p)
sum(bayesclass(p) == 1)
p <- mlbench.2dnormals(500,6)
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
p <- mlbench.2dnormals(500,6, sd = 0.2)
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
p <- mlbench.2dnormals(500,6, sd = 2)
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
p <- mlbench.cassini(5000)
plot(p)
plot(p$x, col=as.numeric(bayesclass(p)))
p<-mlbench.circle(300,2)
plot(p)
p<-mlbench.circle(300,3)
plot(p)
p<-mlbench.circle(300,4)
plot(p)
p<-mlbench.circle(300,1)
plot(p)
p<-mlbench.circle(300,2)
plot(p)
p <- mlbench.cuboids(7000)
plot(p)
p <- mlbench.cuboids(1000)
plot(p)
p <- mlbench.cuboids(200)
plot(p)
p <- mlbench.cuboids(200000)
plot(p)
mlbench.friedman1(n, sd=1)
mlbench.friedman1(3, sd=1)
p <- mlbench.friedman1(n, sd=1)
p <- mlbench.friedman1(3, sd=1)
plot(p)
plot(p$x)
p <- mlbench.friedman2(3)
p
p <- mlbench.friedman2(5)
p
p <- mlbench.hypercube()
plot(p)
p$classes
a = p$classes
a$levels
levels(a)
mlbench.peak(5, d=20)
mlbench.peak(5, d=3)
p<-mlbench.ringnorm(1000, d=2)
plot(p)
p<-mlbench.shapes()
plot(p)
p <- mlbench.simplex()
plot(p)
p<-mlbench.smiley()
plot(p)
p<-mlbench.spirals(300)
plot(p)
p<-mlbench.spirals(300,1.5,0.05)
plot(p)
p<-mlbench.threenorm(1000, d=2)
plot(p)
p<-mlbench.threenorm(1000, d=2)
plot(p)
p<-mlbench.threenorm(1000, d=2)
plot(p)
p<-mlbench.twonorm(1000, d=2)
plot(p)
p<-mlbench.twonorm(1000, d=3)
plot(p)
p<-mlbench.twonorm(1000, d=3)
plot(p)
p<-mlbench.waveform(100)
plot(p)
p<-mlbench.waveform(10)
plot(p)
p<-mlbench.xor(300,2)
plot(p)
p<-mlbench.xor(300,3)
plot(p)
p <- mlbench.2dnormals(500,6)
plot(p)
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
# Variables that show the information about the row in configuration file
timeBasedErrorRow = 1
eventConsumptionErrorRow = 2
eventIdentificationErrorRow = 3
falsePositiveErrorRow = 4
impressionRow = 5
# Calculate the total error using the percentages of the corresponding configuration file
totalError = percentages[timeBasedErrorRow] * timeBasedError + percentages[eventConsumptionErrorRow] * eventConsumptionError
totalError
# Calculate the total error using the percentages of the corresponding configuration file
totalError = percentages[timeBasedErrorRow] * timeBasedError + percentages[eventConsumptionErrorRow] * eventConsumptionError + percentages[3] * eventIdentificationError + falsePositiveError
totalError
percentages[timeBasedErrorRow] * timeBasedError + percentages[eventConsumptionErrorRow]
percentages[timeBasedErrorRow] * timeBasedError + percentages[eventConsumptionErrorRow] * eventConsumptionError
eventIdentificationError
falsePositiveError
# Calculate the total error using the percentages of the corresponding configuration file
totalError = percentages[timeBasedErrorRow] * timeBasedError
totalError
percentages[timeBasedErrorRow] * timeBasedError
percentages[eventConsumptionErrorRow] * eventConsumptionError
eventConsumptionError
eventConsumptionError = 0.1
# Calculate the total error using the percentages of the corresponding configuration file
totalError = percentages[timeBasedErrorRow] * timeBasedError
# Calculate the total error using the percentages of the corresponding configuration file
totalError = percentages[timeBasedErrorRow] * timeBasedError +
percentages[eventConsumptionErrorRow] * eventConsumptionError + percentages[3] * eventIdentificationError + falsePositiveError
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
percentages[impressionRow]
# Read the final percentages
percentages = c()
totalPer
# Read the final percentages
percentages = vector(mode = 'integer', length = length(totalPer))
for ( i in 1 : length(totalPer)) {
percentages[i] = as.numeric(totalPer[[i]]$percentage) / 100
}
i
totalPer[[i]]$percentage
# Read the final percentages
percentages = vector(mode = 'integer', length = length(totalPer)-1)
for ( i in 1 : ( length(totalPer) -) ) {
percentages[i] = as.numeric(totalPer[[i]]$percentage) / 100
}
for ( i in 1 : ( length(totalPer) - 1) ) {
percentages[i] = as.numeric(totalPer[[i]]$percentage) / 100
}
i = 4
totalPer[[i]]$percentage
# Read the configuration files
totalPer <- fromJSON(file = "./configuration/total percentages.json")
totalPer[[i]]$percentage
# Read the final percentages
percentages = vector(mode = 'integer', length = length(totalPer)-1)
for ( i in 1 : ( length(totalPer) - 1) ) {
percentages[i] = as.numeric(totalPer[[i]]$percentage) / 100
}
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
energyData
rm( list = ls())
# name = 'refrigeration'
name = 'washingMachine'
dataName = paste('./power data/', name, ".csv", sep = "")
# fill_chronoseries(dataName, hours)
powerData = read.csv(dataName)
powerT = powerData[,1]/1000
min(powerT)
max(powerT)
# name = 'refrigeration'
name = 'alwaysOn'
dataName = paste('./power data/', name, ".csv", sep = "")
# fill_chronoseries(dataName, hours)
powerData = read.csv(dataName)
powerT = powerData[,1]/1000
max(powerT)
min(powerT)
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/createResults.R')
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
# name = 'refrigeration'
name = 'alwaysOn'
dataName = paste('./power data/', name, ".csv", sep = "")
dayInSec
# Day in seconds
lenDayBefore = 3*3600
dayInSec = 86399 + lenDayBefore # the three hours before
daysInSec
dayInSec
hours = 24
hours * 3600 - 1
hours * 3600 - 1 - dayInSec
c(vector(mode = 'integer', length = 3), 1:10)
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/createResults.R')
τιμε
time
name
# Initialise the variables that will be returned to zero
realEnergy = 0
totalRealEnergy = 0
numberEvents = 0
numberEstimatedEvents = 0
numberFalseEvents = 0
# Day in seconds
lenDayBefore = 3*3600
dayInSec = 86399 + lenDayBefore # the three hours before
# Read the data of the time series
powerData = read.csv(dataName)
dev.off()
dev.off()
dev.off()
# Split the time data from time series
powerT = powerData[,1]/1000
# totalTime = (powerT[length(powerT)] - powerT[1] )
# extraSec = totalTime - hours * 3600;
lenTime = 1:length(powerT)
# Calculate the date in seconds
dateInSec = ymd(date)
dateInSec = strftime(dateInSec, format="%Y-%m-%d %H:%M:%S", tz = "GMT")
dateInSec = as.POSIXct(dateInSec, origin = "1970-01-01", tz = "GMT")
dateInSec = force_tz(dateInSec, "Europe/Amsterdam")
dateInSec = as.numeric(dateInSec) - lenDayBefore   # the three hours before
# Find the position of day in the time data
dateInDataBase = (powerT == dateInSec)
dateInDataBase = lenTime[dateInDataBase]
# Split the power data from time series
power = powerData[,2]
dayPower = power[ 0 : (dayInSec-1) + dateInDataBase] # the power data of that day plus 3 hours before
ylimit = c(0, max(dayPower, 400) + 10)
plot(1 : dayInSec, dayPower, ylim = ylimit, type = 'l')
# Create a fake pulse for the image
dayBeforePower = vector(mode = 'integer', length = (lenDayBefore+2))
dayBeforePower[2:(lenDayBefore+1)] = 400
# Highlight the day before part
lines(1:(lenDayBefore+2), dayBeforePower, col = 'red')
dt = time[1,2] - time[1,1]
# Find the start and end time of the event in the time data
tstart = (powerT == (time[1]))
tstart = lenTime[tstart]
tend = (powerT == (time[2]))
tend = lenTime[tend]
# Keep only the power of the day
dayPower = power[tstart:tend]
dayPower = median_filter(dayPower)
realEnergy = min(dayPower) * hours / 1000
totalRealEnergy = realEnergy
a = c(vector(mode = 'integer', length = lenDayBefore), dayPower)
dayInSec
lines(1 : dayInSec, c(vector(mode = 'integer', length = lenDayBefore), dayPower), col = 'red')
lines(1 : dayInSec, c(vector(mode = 'integer', length = lenDayBefore-1), dayPower), col = 'red')
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
source('C:/Users/andreapc/Desktop/Andreas/project/internship/reading material/input/final/runConfig.R')
dev.off()
dev.off()
